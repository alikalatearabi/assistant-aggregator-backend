import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { IsArray, IsBoolean, IsEnum, IsMongoId, IsNotEmpty, IsObject, IsOptional, IsString, ValidateNested, IsInt, Min } from 'class-validator';
import { Type } from 'class-transformer';

export class ChatMessagesInputsDto {
  @ApiProperty({ description: 'Similarity threshold (as string)', example: '0.8' })
  @IsString()
  @IsNotEmpty()
  similarityThreshold: string;

  @ApiProperty({ description: 'Number of context items to retrieve', example: 5 })
  @IsInt()
  @Min(0)
  contextCount: number;
}

export enum ChatMessagesResponseMode {
  STREAMING = 'streaming',
  BLOCKING = 'blocking',
}

export class ChatMessagesRequestDto {
  @ApiProperty({ description: 'User query text', example: 'What are the Q3 KPIs?' })
  @IsString()
  @IsNotEmpty()
  query: string;

  @ApiProperty({ description: 'Inputs object', type: ChatMessagesInputsDto })
  @ValidateNested()
  @Type(() => ChatMessagesInputsDto)
  inputs: ChatMessagesInputsDto;

  @ApiProperty({ description: 'Response mode', enum: ChatMessagesResponseMode, example: ChatMessagesResponseMode.BLOCKING })
  @IsEnum(ChatMessagesResponseMode)
  responseMode: ChatMessagesResponseMode;

  @ApiProperty({ description: 'User ID', example: '507f1f77bcf86cd799439012' })
  @IsMongoId()
  user: string;

  @ApiProperty({ description: 'Conversation ID', example: '507f1f77bcf86cd799439011' })
  @IsMongoId()
  conversationId: string;

  @ApiPropertyOptional({ description: 'Associated file IDs', type: [String], example: ['507f1f77bcf86cd799439021'] })
  @IsArray()
  @IsMongoId({ each: true })
  @IsOptional()
  files?: string[];

  @ApiProperty({ description: 'Auto-generated name flag', example: true })
  @IsBoolean()
  autoGeneratedName: boolean;
}

export class ChatMessagesMetadataDto {
  @ApiPropertyOptional({ description: 'Retriever resources used', type: Object })
  @IsObject()
  @IsOptional()
  retrieverResources?: Record<string, any>;

  @ApiPropertyOptional({ description: 'Usage details', type: Object })
  @IsObject()
  @IsOptional()
  usage?: Record<string, any>;
}

export class ChatMessagesResponseDto {
  @ApiProperty({ description: 'Event type', example: 'message.completed' })
  event: string;

  @ApiProperty({ description: 'Task ID (UUID)' })
  taskId: string;

  @ApiProperty({ description: 'Event ID' })
  id: string;

  @ApiProperty({ description: 'Message ID (same as id)' })
  messageId: string;

  @ApiProperty({ description: 'Conversation ID' })
  conversationId: string;

  @ApiProperty({ description: 'Mode', example: 'chat', default: 'chat' })
  mode: string;

  @ApiProperty({ description: 'Answer content' })
  answer: string;

  @ApiProperty({ description: 'Metadata object', type: ChatMessagesMetadataDto })
  metadata: ChatMessagesMetadataDto;

  @ApiProperty({ description: 'Creation timestamp', example: new Date().toISOString() })
  created_at: string;
}

export class ChatMessagesErrorDto {
  @ApiProperty({ description: 'HTTP-style status code', example: 500 })
  status: number;

  @ApiProperty({ description: 'Machine-readable error code', example: 'INTERNAL_ERROR' })
  code: string;

  @ApiProperty({ description: 'Human-readable error message', example: 'Unexpected error while generating answer' })
  message: string;
}
